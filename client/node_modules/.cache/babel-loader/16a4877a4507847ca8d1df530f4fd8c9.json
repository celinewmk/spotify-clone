{"ast":null,"code":"var _jsxFileName = \"/Users/celine_wan/Documents/Projects/spotify-clone/client/src/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport SpotifyPlayer from 'react-spotify-web-playback';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Player(_ref) {\n  _s();\n\n  let {\n    accessToken,\n    trackUri\n  } = _ref;\n  const [play, setPlay] = useState(false);\n  useEffect(() => {\n    setPlay(true);\n  }, [trackUri]);\n  if (!accessToken) return null;\n  return /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n    token: accessToken,\n    showSaveIcon: true,\n    callback: state => {\n      if (!state.isPlaying) setPlay(false);\n    },\n    play: play,\n    uris: trackUri ? [trackUri] : []\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Player, \"jVhLcXDeOrLi5A95zDr62ndrz9E=\");\n\n_c = Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/celine_wan/Documents/Projects/spotify-clone/client/src/Player.js"],"names":["React","useEffect","useState","SpotifyPlayer","Player","accessToken","trackUri","play","setPlay","state","isPlaying"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;AAEA,eAAe,SAASC,MAAT,OAAyC;AAAA;;AAAA,MAAzB;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAAyB;AAEpD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,KAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAFQ,EAEN,CAACF,QAAD,CAFM,CAAT;AAIA,MAAG,CAACD,WAAJ,EAAiB,OAAO,IAAP;AACjB,sBAAO,QAAC,aAAD;AACP,IAAA,KAAK,EAAEA,WADA;AAEP,IAAA,YAAY,MAFL;AAGP,IAAA,QAAQ,EAAEI,KAAK,IAAI;AACf,UAAG,CAACA,KAAK,CAACC,SAAV,EAAqBF,OAAO,CAAC,KAAD,CAAP;AACxB,KALM;AAMP,IAAA,IAAI,EAAED,IANC;AAOP,IAAA,IAAI,EAAED,QAAQ,GAAG,CAACA,QAAD,CAAH,GAAgB;AAPvB;AAAA;AAAA;AAAA;AAAA,UAAP;AASH;;GAlBuBF,M;;KAAAA,M","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport SpotifyPlayer from 'react-spotify-web-playback'\n\nexport default function Player({accessToken, trackUri}) {\n    \n    const [play, setPlay] = useState(false);\n\n    useEffect(() => {\n        setPlay(true)\n    }, [trackUri])\n\n    if(!accessToken) return null\n    return <SpotifyPlayer \n    token={accessToken}\n    showSaveIcon\n    callback={state => {\n        if(!state.isPlaying) setPlay(false)\n    }}\n    play={play}\n    uris={trackUri ? [trackUri] : []}\n  />\n}\n"]},"metadata":{},"sourceType":"module"}